using System.Numerics;
using NexusForever.Game.Abstract.Entity.Movement.Generator;
using NexusForever.Game.Static.Entity.Movement.Spline;
using NexusForever.Network.World.Entity;
using NexusForever.Shared;

namespace NexusForever.Game.Abstract.Entity.Movement
{
    public interface IMovementManager : IUpdate, IEnumerable<(EntityCommand, IEntityCommandModel)>
    {
        /// <summary>
        /// Set position with supplied <see cref="Vector3"/>.
        /// </summary>
        /// <remarks>
        /// Be aware that this position doesn't always match the grid position (eg: when on a vehicle)
        /// </remarks>
        void SetPosition(Vector3 position);

        /// <summary>
        /// Set rotation with supplied <see cref="Vector3"/>.
        /// </summary>
        /// <remarks>
        /// Be aware that this rotation doesn't always match the entity rotation (eg: when on a vehicle)
        /// </remarks>
        void SetRotation(Vector3 rotation);

        /// <summary>
        /// Return current platform unit id.
        /// </summary>
        uint? GetPlatform();

        /// <summary>
        /// Set platform with supplied unit id.
        /// </summary>
        void SetPlatform(uint unitId);

        /// <summary>
        /// Launch a new single spline with supplied <see cref="SplineMode"/> and speed.
        /// </summary>
        void LaunchSpline(ushort splineId, SplineMode mode, float speed);

        /// <summary>
        /// Launch a new multi spline with supplied <see cref="SplineMode"/> and speed.
        /// </summary>
        void LaunchSpline(List<ushort> splineIds, SplineMode mode, float speed);

        /// <summary>
        /// Launch a new custom spline with supplied <see cref="SplineType"/>, <see cref="SplineMode"/> and speed.
        /// </summary>
        void LaunchSpline(List<Vector3> nodes, SplineType type, SplineMode mode, float speed);

        /// <summary>
        /// Stops the current active spline, relocating the owner to the interpolated position.
        /// </summary>
        void StopSpline();

        /// <summary>
        /// Broadcast current commands if changes have occured since the last broadcast.
        /// </summary>
        void BroadcastCommands();

        /// <summary>
        /// Launch a new custom linear spline where the points are generated by <see cref="IMovementGenerator"/>.
        /// </summary>
        void LaunchGenerator(IMovementGenerator generator, float speed, SplineMode mode = SplineMode.OneShot);

        void Follow(IWorldEntity entity, float distance);
    }
}